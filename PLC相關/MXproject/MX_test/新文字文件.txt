 public ActUtlTypeLib.ActUtlType lpcom_ReferencesUtlType;

        public ConnectPLC()
        { 
            lpcom_ReferencesUtlType = new ActUtlTypeLib.ActUtlType(); 
        }


        /// <summary>
        /// 断开PLC连接
        /// </summary>
        public void ClosePLC()
        {
            int iReturnCode;    //Return code 
            try
            { 
                iReturnCode = lpcom_ReferencesUtlType.Close(); 
                if (iReturnCode == 0)
                {
                    isPLCConnected = false;
                }
                lpcom_ReferencesUtlType = null; 
            } 
            catch (Exception exception)
            {
                MessageBox.Show(exception.Message, "", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
        }


        #region  "PLC连接"
        public void connectPLC()
        {
            int iReturnCode;                     //Return code
            int iLogicalStationNumber = 0;      //LogicalStationNumber for ActUtlType      
            try
            {
                //Set the value of 'LogicalStationNumber' to the property.
                lpcom_ReferencesUtlType.ActLogicalStationNumber = iLogicalStationNumber; 
                iReturnCode = lpcom_ReferencesUtlType.Open(); 
                if (iReturnCode == 0)
                {
                    isPLCConnected = true;
                  //  Thread PLC_Thread = new Thread(new ThreadStart(PLC_MONITOR));//心跳数据
                 //   PLC_Thread.IsBackground = true;
                  //  PLC_Thread.Start();
                } 
            } 
            catch (Exception exception)
            {
                MessageBox.Show(exception.Message, "", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
        #endregion
        /// <summary>
        /// 读取PLC信息16位整数
        /// </summary>
        /// <param name="szDevice"></param>
        /// <param name="lplData"></param>
        /// <returns></returns>
        public bool ReadPlcData16(string szDevice, out int lplData)
        {
            lock (plcLock)
            {
                int iReturnCode = 0;                //Return code
                lplData = 0;
                try
                { 
                        iReturnCode = lpcom_ReferencesUtlType.GetDevice(szDevice, out lplData); 
                    if (iReturnCode == 0)
                        return true;
                    else
                        return true;
                }
                catch (Exception exception)
                {
                    MessageBox.Show(exception.Message, "", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return false;
                }
            }
        }
        /// <summary>
        /// 写入PLC信息16位整数
        /// </summary>
        /// <param name="szDevice"></param>
        /// <param name="lplData"></param>
        /// <returns></returns>
        public bool WritePlcData16(string szDevice,  int lplData)
        {
            lock (plcLock)
            {
                int iReturnCode = 0;                //Return code
                lplData = 0;
                try
                {
                    iReturnCode = lpcom_ReferencesUtlType.SetDevice(szDevice, lplData);
                    if (iReturnCode == 0)
                        return true;
                    else
                        return true;
                }
                catch (Exception exception)
                {
                    MessageBox.Show(exception.Message, "", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return false;
                }
            }
        }

        /// <summary>
        /// 读取PLC信息32位实数
        /// </summary>
        /// <param name="szDevice"></param>
        /// <param name="lplData"></param>
        /// <returns></returns>
        public bool ReadPlcData32(string szDevice, out float lplData) 
        {
            lock (plcLock)
            {
                int iReturnCode = 0;                //Return code
                lplData = 0;
                try
                {
                    if (szDevice.Substring(0, 1) == "D")
                    {
                        string gaoadd = "D" + Convert.ToString(Convert.ToInt32(szDevice.Substring(1, 4)) + 1).PadLeft(4, '0');
                        short Lfloat; short Hfloat;
                        iReturnCode = lpcom_ReferencesUtlType.GetDevice2(szDevice, out Lfloat);
                        iReturnCode = lpcom_ReferencesUtlType.GetDevice2(gaoadd, out Hfloat);
                        byte[] L = System.BitConverter.GetBytes(Lfloat);
                        byte[] H = System.BitConverter.GetBytes(Hfloat);
                        byte[] f = new byte[H.Length + L.Length];
                        Buffer.BlockCopy(L, 0, f, 0, L.Length);
                        Buffer.BlockCopy(H, 0, f, L.Length, H.Length);
                        lplData = BitConverter.ToSingle(f, 0); 

                    }
                    else if (szDevice.Substring(0, 2) == "ZR")
                    {
                        string gaoadd = "ZR" + Convert.ToString(Convert.ToInt32(szDevice.Substring(2, 4)) + 1).PadLeft(4, '0');
                        short Lfloat; short Hfloat;
                        iReturnCode = lpcom_ReferencesUtlType.GetDevice2(szDevice, out Lfloat);
                        iReturnCode = lpcom_ReferencesUtlType.GetDevice2(gaoadd, out Hfloat);
                        byte[] L = System.BitConverter.GetBytes(Lfloat);
                        byte[] H = System.BitConverter.GetBytes(Hfloat);
                        byte[] f = new byte[H.Length + L.Length];
                        Buffer.BlockCopy(L, 0, f, 0, L.Length);
                        Buffer.BlockCopy(H, 0, f, L.Length, H.Length);
                        lplData = BitConverter.ToSingle(f, 0);

                    }
                    if (iReturnCode == 0)
                        return true;
                    else
                        return true;
                }
                catch (Exception exception)
                {
                    MessageBox.Show(exception.Message, "", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return false;
                }
            }
        }

        /// <summary>
        /// 发送PLC信息32位实数
        /// </summary>
        /// <param name="szDevice"></param>
        /// <param name="lplData"></param>
        /// <returns></returns>
        public bool WritePlcData32(string szDevice, float FF)
        {
            lock (plcLock)
            {
                int iReturnCode = 0;                //Return code
                try
                { 
                    if (szDevice.Substring(0, 1) == "D")
                    { 
                        string gaoadd = "D" + Convert.ToString(Convert.ToInt32(szDevice.Substring(1, 4)) + 1).PadLeft(4, '0');
                         
                        byte[] f = BitConverter.GetBytes(FF);
                        byte[] L = new byte[2];
                        byte[] H = new byte[2];
                        Buffer.BlockCopy(f, 0, L, 0, 2);
                        Buffer.BlockCopy(f, 2, H, 0, 2);
                        short LL = BitConverter.ToInt16(L, 0);       //-22249
                        short HH = BitConverter.ToInt16(H, 0);    //17312   
                        iReturnCode = lpcom_ReferencesUtlType.SetDevice2(szDevice, LL);
                        iReturnCode = lpcom_ReferencesUtlType.SetDevice2(gaoadd, HH); 
                    }
                    else if (szDevice.Substring(0, 2) == "ZR")
                    {
                        string gaoadd = "ZR" + Convert.ToString(Convert.ToInt32(szDevice.Substring(2, 4)) + 1).PadLeft(4, '0');

                        byte[] f = BitConverter.GetBytes(FF);
                        byte[] L = new byte[2];
                        byte[] H = new byte[2];
                        Buffer.BlockCopy(f, 0, L, 0, 2);
                        Buffer.BlockCopy(f, 2, H, 0, 2);
                        short LL = BitConverter.ToInt16(L, 0);       //-22249
                        short HH = BitConverter.ToInt16(H, 0);    //17312   
                        iReturnCode = lpcom_ReferencesUtlType.SetDevice2(szDevice, LL);
                        iReturnCode = lpcom_ReferencesUtlType.SetDevice2(gaoadd, HH);
                    }
                    if (iReturnCode == 0)
                            return true;
                        else
                            return true;
                }
                catch (Exception exception)
                {
                    MessageBox.Show(exception.Message, "", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return false;
                }
            }
        }
        /// <summary>
        /// 发送PLC信息32位整数
        /// </summary>
        /// <param name="szDevice"></param>
        /// <param name="lplData"></param>
        /// <returns></returns>
        public bool WritePlcData(string szDevice, int lplData)
        {
            lock (plcLock)
            {
                int iReturnCode = 0;                //Return code
                try
                {
                    int gao = 0;
                    int di = 0;
                    if (lplData >= 65536)
                    {
                        gao = lplData / 65536;
                        di = lplData % 65536;
                        string gaoadd = "D" + Convert.ToString(Convert.ToInt32(szDevice.Substring(1, 4)) + 1).PadLeft(4, '0');
                        iReturnCode = lpcom_ReferencesUtlType.SetDevice(gaoadd, gao);
                        iReturnCode = lpcom_ReferencesUtlType.SetDevice(szDevice, di);
                        if (iReturnCode == 0)
                            return true;
                        else
                            return true;
                    }
                    else if (lplData >= 0 &amp;&amp; lplData < 65536)
                    {
                        iReturnCode = lpcom_ReferencesUtlType.SetDevice(szDevice, lplData);
                        if (szDevice.Substring(0, 1) == "D")
                        {
                            string gaoadd = "D" + Convert.ToString(Convert.ToInt32(szDevice.Substring(1, 4)) + 1).PadLeft(4, '0');
                            iReturnCode = lpcom_ReferencesUtlType.SetDevice(gaoadd, 0);
                        }
                        if (iReturnCode == 0)
                            return true;
                        else
                            return true;
                    }
                    else if (lplData < 0 &amp;&amp; lplData >= -65536)
                    {
                        iReturnCode = lpcom_ReferencesUtlType.SetDevice(szDevice, lplData);
                        if (szDevice.Substring(0, 1) == "D")
                        {
                            string gaoadd = "D" + Convert.ToString(Convert.ToInt32(szDevice.Substring(1, 4)) + 1).PadLeft(4, '0');
                            iReturnCode = lpcom_ReferencesUtlType.SetDevice(gaoadd, -1);
                        }
                        if (iReturnCode == 0)
                            return true;
                        else
                            return true;
                    }
                    else
                    {
                        gao = lplData / 65536 - 1;
                        di = lplData % 65536;
                        string gaoadd = "D" + Convert.ToString(Convert.ToInt32(szDevice.Substring(1, 4)) + 1).PadLeft(4, '0');
                        iReturnCode = lpcom_ReferencesUtlType.SetDevice(gaoadd, gao);
                        iReturnCode = lpcom_ReferencesUtlType.SetDevice(szDevice, di);
                        if (iReturnCode == 0)
                            return true;
                        else
                            return true;
                    }
                }
                catch (Exception exception)
                {
                    MessageBox.Show(exception.Message, "", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return false;
                }
            }
        }
        /// <summary>
        /// 读取PLC信息32位整数
        /// </summary>
        /// <param name="szDevice"></param>
        /// <param name="lplData"></param>
        /// <returns></returns>
        public bool ReadPlcData(string szDevice, out int lplData)
        {
            lock (plcLock)
            {
                int iReturnCode = 0;                //Return code
                lplData = 0;
                try
                {
                    int gao = 0;
                    int di = 0;
                    string gaoadd = "D" + Convert.ToString(Convert.ToInt32(szDevice.Substring(1, 4)) + 1).PadLeft(4, '0');
                    iReturnCode = lpcom_ReferencesUtlType.GetDevice(gaoadd, out gao);
                    iReturnCode = lpcom_ReferencesUtlType.GetDevice(szDevice,out di);
                    lplData = gao * 65536 + di;
                    if (iReturnCode == 0)
                            return true;
                        else
                            return true; 
                }
                catch (Exception exception)
                {
                    MessageBox.Show(exception.Message, "", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return false;
                }
            }
        }
        /// <summary>
        /// 软元件参数批量读取
        /// </summary>
        /// <param name="szDevice"></起始地址>
        /// <param name="lSize"></长度/个数>
        /// <param name="lplData"></值>
        /// <returns></returns>
        public bool ReadPlcBlockData(string szDevice, int lSize, out int lplData)
        {

            lplData = 0;
            int iReturnCode = 0;          //Return code
            try
            {
                iReturnCode = lpcom_ReferencesUtlType.ReadDeviceBlock(szDevice, lSize, out lplData);   //lSize表示读取多少个 8位
                if (iReturnCode == 0)
                    return true;
                else
                    return true;
            }
            catch (Exception exception)
            {
                MessageBox.Show(exception.Message, "", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return false;
            }

        }


    }
<div class="hljs-button signin" data-title="登录后复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}"></div></code>